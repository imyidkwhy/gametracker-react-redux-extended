{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nconst toNodeDescription = node => node.type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];\nvar StandardErrors = {\n  AccessorIsGenerator: ({\n    kind\n  }) => `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext: \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport: \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace: 'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({\n    exportName\n  }) => `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({\n    phase\n  }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName\n  }) => `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: ({\n    type\n  }) => `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: ({\n    type\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert: \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({\n    importName\n  }) => `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({\n    radix\n  }) => `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({\n    reservedWord\n  }) => `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({\n    identifierName\n  }) => `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({\n    ancestor\n  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({\n    ancestor\n  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({\n    ancestor\n  }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({\n    unexpected\n  }) => `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({\n    labelName\n  }) => `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingOneOfPlugins: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({\n    key\n  }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode\n  }) => `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`,\n  ModuleExportUndefined: ({\n    localName\n  }) => `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({\n    identifierName\n  }) => `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({\n    identifierName\n  }) => `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault: 'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({\n    keyword\n  }) => `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({\n    reservedWord\n  }) => `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected\n  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`,\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName\n  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({\n    identifierName\n  }) => `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction: \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: ({\n    referenceName\n  }) => `Assigning to '${referenceName}' in strict mode.`,\n  StrictEvalArgumentsBinding: ({\n    bindingName\n  }) => `Binding '${bindingName}' in strict mode.`,\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = Object.assign({\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({\n    token\n  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({\n    type\n  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n    type\n  })}; please wrap it in parentheses.`\n}, {\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n});\nconst _excluded = [\"message\"];\nfunction defineHidden(obj, key, value) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value\n  });\n}\nfunction toParseErrorConstructor({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin\n}) {\n  const hasMissingPlugin = reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n  {\n    const oldReasonCodes = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter: \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\"\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n  return function constructor(loc, details) {\n    const error = new SyntaxError();\n    error.code = code;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = details.missingPlugin;\n    }\n    defineHidden(error, \"clone\", function clone(overrides = {}) {\n      var _overrides$loc;\n      const {\n        line,\n        column,\n        index\n      } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;\n      return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));\n    });\n    defineHidden(error, \"details\", details);\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get() {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value) {\n        Object.defineProperty(this, \"message\", {\n          value,\n          writable: true\n        });\n      }\n    });\n    return error;\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref = typeof template === \"string\" ? {\n        message: () => template\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nfunction createDefaultOptions() {\n  return {\n    sourceType: \"script\",\n    sourceFilename: undefined,\n    startIndex: 0,\n    startColumn: 0,\n    startLine: 1,\n    allowAwaitOutsideFunction: false,\n    allowReturnOutsideFunction: false,\n    allowNewTargetOutsideFunction: false,\n    allowImportExportEverywhere: false,\n    allowSuperOutsideMethod: false,\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    plugins: [],\n    strictMode: null,\n    ranges: false,\n    tokens: false,\n    createImportExpressions: false,\n    createParenthesizedExpressions: false,\n    errorRecovery: false,\n    attachComment: true,\n    annexB: true\n  };\n}\nfunction getOptions(opts) {\n  const options = createDefaultOptions();\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n  for (const key of Object.keys(options)) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null) {\n      throw new Error(\"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\");\n    }\n  }\n  return options;\n}\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => {\n  if (object) {\n    defineProperty(object, key, {\n      enumerable: false,\n      value: object[key]\n    });\n  }\n};\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.optionFlags & 256) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (_) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = \"Literal\";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = \"ExpressionStatement\";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    const {\n      typeParameters\n    } = node;\n    if (typeParameters) {\n      delete node.typeParameters;\n      funcNode.typeParameters = typeParameters;\n      this.resetStartLocationFromNode(funcNode, typeParameters);\n    }\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n  nameIsConstructor(key) {\n    if (key.type === \"Literal\") return key.value === \"constructor\";\n    return super.nameIsConstructor(key);\n  }\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n    return propertyNode;\n  }\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseClassAccessorProperty(node) {\n    const accessorPropertyNode = super.parseClassAccessorProperty(node);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return accessorPropertyNode;\n      }\n    }\n    accessorPropertyNode.type = \"AccessorProperty\";\n    return accessorPropertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"Property\" && (prop.kind === \"get\" || prop.kind === \"set\")) {\n      this.raise(Errors.PatternHasAccessor, prop.key);\n    } else if (prop.type === \"Property\" && prop.method) {\n      this.raise(Errors.PatternHasMethod, prop.key);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === \"Import\") {\n      var _ref, _ref2;\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      node.options = (_ref = node.arguments[1]) != null ? _ref : null;\n      node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null;\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case \"ExportDefaultDeclaration\":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n    return node;\n  }\n  isOptionalMemberExpression(node) {\n    if (node.type === \"ChainExpression\") {\n      return node.expression.type === \"MemberExpression\";\n    }\n    return super.isOptionalMemberExpression(node);\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.type === \"Property\" && (node.method || node.kind === \"get\" || node.kind === \"set\");\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _defer: createKeywordLike(\"defer\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _source: createKeywordLike(\"source\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\")\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 133;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 133;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 137;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 129 && token <= 131;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 121 && token <= 123;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 124 && token <= 130;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[143].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nclass Scope {\n  constructor(flags) {\n    this.flags = 0;\n    this.names = new Map();\n    this.firstLexicalName = \"\";\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & 1) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & 2) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & 16) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & 32) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & 64) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & 64) > 0 && (flags & 2) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 128) {\n        return true;\n      }\n      if (flags & (387 | 64)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & 2) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & 8 || bindingType & 16) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      let type = scope.names.get(name) || 0;\n      if (bindingType & 16) {\n        type = type | 4;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | 2;\n      }\n      scope.names.set(name, type);\n      if (bindingType & 8) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & 4) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | 1);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & 387) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & 1)) return false;\n    if (bindingType & 8) {\n      return scope.names.has(name);\n    }\n    const type = scope.names.get(name);\n    if (bindingType & 16) {\n      return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;\n    }\n    return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 387) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (387 | 64) && !(flags & 4)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & 2048) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & 2048 && !scope.declareFunctions.has(name)) {\n      const type = scope.names.get(name);\n      return (type & 4) > 0 || (type & 2) > 0;\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  sourceToOffsetPos(sourcePos) {\n    return sourcePos + this.startIndex;\n  }\n  offsetToSourcePos(offsetPos) {\n    return offsetPos - this.startIndex;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    const {\n      commentsLen\n    } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            {\n              adjustInnerComments(node, node.members, commentWS);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  resetPreviousIdentifierLeadingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction hasNewLine(input, start, end) {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.flags = 1024;\n    this.startIndex = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.labels = [];\n    this.commentsLen = 0;\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 140;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.context = [types.brace];\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  get strict() {\n    return (this.flags & 1) > 0;\n  }\n  set strict(v) {\n    if (v) this.flags |= 1;else this.flags &= -2;\n  }\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);\n  }\n  get maybeInArrowParameters() {\n    return (this.flags & 2) > 0;\n  }\n  set maybeInArrowParameters(v) {\n    if (v) this.flags |= 2;else this.flags &= -3;\n  }\n  get inType() {\n    return (this.flags & 4) > 0;\n  }\n  set inType(v) {\n    if (v) this.flags |= 4;else this.flags &= -5;\n  }\n  get noAnonFunctionType() {\n    return (this.flags & 8) > 0;\n  }\n  set noAnonFunctionType(v) {\n    if (v) this.flags |= 8;else this.flags &= -9;\n  }\n  get hasFlowComment() {\n    return (this.flags & 16) > 0;\n  }\n  set hasFlowComment(v) {\n    if (v) this.flags |= 16;else this.flags &= -17;\n  }\n  get isAmbientContext() {\n    return (this.flags & 32) > 0;\n  }\n  set isAmbientContext(v) {\n    if (v) this.flags |= 32;else this.flags &= -33;\n  }\n  get inAbstractClass() {\n    return (this.flags & 64) > 0;\n  }\n  set inAbstractClass(v) {\n    if (v) this.flags |= 64;else this.flags &= -65;\n  }\n  get inDisallowConditionalTypesContext() {\n    return (this.flags & 128) > 0;\n  }\n  set inDisallowConditionalTypesContext(v) {\n    if (v) this.flags |= 128;else this.flags &= -129;\n  }\n  get soloAwait() {\n    return (this.flags & 256) > 0;\n  }\n  set soloAwait(v) {\n    if (v) this.flags |= 256;else this.flags &= -257;\n  }\n  get inFSharpPipelineDirectBody() {\n    return (this.flags & 512) > 0;\n  }\n  set inFSharpPipelineDirectBody(v) {\n    if (v) this.flags |= 512;else this.flags &= -513;\n  }\n  get canStartJSXElement() {\n    return (this.flags & 1024) > 0;\n  }\n  set canStartJSXElement(v) {\n    if (v) this.flags |= 1024;else this.flags &= -1025;\n  }\n  get containsEsc() {\n    return (this.flags & 2048) > 0;\n  }\n  set containsEsc(v) {\n    if (v) this.flags |= 2048;else this.flags &= -2049;\n  }\n  get hasTopLevelAwait() {\n    return (this.flags & 4096) > 0;\n  }\n  set hasTopLevelAwait(v) {\n    if (v) this.flags |= 4096;else this.flags &= -4097;\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);\n  }\n  clone() {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!(this.optionFlags & 2048)) return false;\n        this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & 256) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  nextTokenInLineStart() {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n  nextTokenInLineStartSince(pos) {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n  }\n  lookaheadInLineCharCode() {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(140);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.optionFlags & 256) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.optionFlags & 256) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = this.optionFlags & 4096 ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment(\"*/\");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  comments == null || comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  comments == null || comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule && this.optionFlags & 8192) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments == null || comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule && this.optionFlags & 8192) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments == null || comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if ((comments == null ? void 0 : comments.length) > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());\n    }\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(139, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(139, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(138, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len, forceLen = false, allowNumSeparator = true) {\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(136, str);\n      return;\n    }\n    this.finishToken(135, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      var isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n    if (isBigInt) {\n      this.finishToken(136, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(137, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(135, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(134, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos));\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n    }\n  }\n  recordStrictModeErrors(toParseError, at) {\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(132, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n    if (!(this.optionFlags & 2048)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError(loc, details);\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, at, details);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {\n      expected: type ? tokenLabelName(type) : null\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & 3) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & 4;\n        const newStatic = elementType & 4;\n        const oldKind = accessor & 3;\n        const newKind = elementType & 3;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name\n      });\n    }\n  }\n}\nclass ExpressionScope {\n  constructor(type = 0) {\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === 2 || this.type === 1;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === 3;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, at) {\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, node) {\n    const origin = node.loc.start;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, node) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError(at) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === 2) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(3);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(1);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(2);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & 2) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & 1) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & 4) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & 8) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value, enumerable = true) {\n    if (!node) return;\n    let {\n      extra\n    } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);\n  }\n  hasFollowingLineBreak() {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n  expect(type, loc) {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = 0;\n    if (this.inModule) {\n      paramFlags |= 2;\n    }\n    if (this.optionFlags & 32) {\n      paramFlags |= 1;\n    }\n    this.scope.enter(1);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if ((parser == null ? void 0 : parser.optionFlags) & 128) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & 128) node.range[1] = endLoc.index;\n    if (this.optionFlags & 4096) {\n      this.processComment(node);\n    }\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & 128) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & 128) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: ({\n    reservedType\n  }) => `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName\n  }) => `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName\n  }) => `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({\n    enumName\n  }) => `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName\n  }) => `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName\n  }) => `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType\n  }) => `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName\n  }) => `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName\n  }) => `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion\n  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName\n  }) => `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName\n  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({\n    reservedType\n  }) => `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion\n  }) => `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n  finishToken(type, val) {\n    if (type !== 134 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n    super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(110);\n    if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, 2048, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(127)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(130)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(131)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, 5, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(0);\n    if (this.match(134)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(130) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n        }\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {\n        node = this.parseExport(node, null);\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n    this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(111);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n  flowParseInterfaceish(node, isClass) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (isClass) {\n      node.implements = [];\n      node.mixins = [];\n      if (this.eatContextual(117)) {\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n      if (this.eatContextual(113)) {\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(130);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n      }\n    }\n    return this.finishNode(node, \"TypeParameter\");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(143)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n  flowInTopLevelContext(cb) {\n    if (this.curContext() !== types.brace) {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    } else {\n      return cb();\n    }\n  }\n  flowParseTypeParameterInstantiationInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.flowParseTypeParameterInstantiation();\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    node.params = [];\n    this.flowInTopLevelContext(() => {\n      this.expect(47);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(48)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(48)) {\n          this.expect(12);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    });\n    this.state.inType = oldInType;\n    if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    if (this.reScan_lt() !== 47) return;\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(129);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(118)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(106)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n        if (this.isContextual(99) || this.isContextual(104)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, variance);\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, variance);\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, property);\n    }\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, property);\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    startLoc != null ? startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node);\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        {\n          const node = this.startNode();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(10);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(11);\n          this.expect(19);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n      case 10:\n        {\n          const node = this.startNode();\n          this.next();\n          if (!this.match(11) && !this.match(21)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== 17 && token !== 14;\n            } else {\n              isGroupedType = true;\n            }\n          }\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n              this.expect(11);\n              return type;\n            } else {\n              this.eat(12);\n            }\n          }\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(11);\n          this.expect(19);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n      case 134:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n          if (this.match(135)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n          if (this.match(136)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);\n        }\n        this.unexpected();\n        return;\n      case 135:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n      case 136:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(129)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 132 && this.state.value === \"_\") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      return;\n    }\n    super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(129)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(2 | 4);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    const newNode = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      newNode.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = newNode;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n    return newNode;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(130)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(131)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(129)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.isContextual(126)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(130) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(125)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, startLoc);\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n      }\n    }\n  }\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(132, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        this.finishOp(18, 2);\n      } else {\n        this.finishOp(17, 1);\n      }\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      this.readIterator();\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiationInExpression();\n      }\n    }\n    if (this.isContextual(113)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseFunctionParamType(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, param);\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, param);\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n    }\n    return node;\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      if (!isExport) return true;\n      const ch = this.lookaheadCharCode();\n      return ch === 123 || ch === 42;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      if (!phase && this.match(65)) {\n        return;\n      }\n      node.exportKind = phase === \"type\" ? phase : \"value\";\n    } else {\n      if (phase === \"type\" && this.match(55)) this.unexpected();\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, specifier, {\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, isConstructor) {\n    const kind = node.kind;\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin(\"jsx\") && (this.match(143) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n      }\n    }\n    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.includes(startLoc.index)) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiationInExpression();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && (this.match(47) || this.match(51))) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node, false);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, details) {\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n  }\n  flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 135:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 134:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === \"\") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, id, {\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (!this.eatContextual(102)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.shouldParseTypes()) {\n      if (this.match(47) || this.match(51)) {\n        node.typeArguments = this.flowParseTypeParameterInstantiationInExpression();\n      }\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({\n    openingTagName\n  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity\n  }) => `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              this.finishToken(143);\n            } else {\n              super.getTokenFromCode(ch);\n            }\n            return;\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(142, out);\n          return;\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(134, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    this.finishToken(141, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(141)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, node);\n        }\n        return node;\n      case 143:\n      case 134:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(144)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(144)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(144);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(144)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(144);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 143:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 142:\n            children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);\n    }\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(143)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(143);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      this.jsxReadToken();\n      return;\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        this.jsxReadWord();\n        return;\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        this.finishToken(144);\n        return;\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        this.jsxReadString(code);\n        return;\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      this.finishToken(143);\n      return;\n    }\n    super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 143) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 143) {\n      context.push(types.j_oTag);\n    } else if (type === 144) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.tsNames = new Map();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor(...args) {\n    super(...args);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags === 256) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags === 256) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & 4096) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n    if (bindingType & 1024) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | 16);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & 2) {\n      if (!(bindingType & 1)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | 1;\n    }\n    if (bindingType & 256) {\n      type = type | 2;\n    }\n    if (bindingType & 512) {\n      type = type | 4;\n    }\n    if (bindingType & 128) {\n      type = type | 8;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    const type = scope.tsNames.get(name);\n    if ((type & 2) > 0) {\n      if (bindingType & 256) {\n        const isConst = !!(bindingType & 512);\n        const wasConst = (type & 4) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & 128 && (type & 8) > 0) {\n      if (scope.names.get(name) & 2) {\n        return !!(bindingType & 1);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & 2 && (type & 1) > 0) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if ((type & 1) > 0 || (type & 16) > 0) {\n        return;\n      }\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);\n        } else if (parenthesized.type !== \"MemberExpression\" && !this.isOptionalMemberExpression(parenthesized)) {\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      this.toAssignableListItem(exprList, i, isLHS);\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n  toAssignableListItem(exprList, index, isLHS) {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      node.type = \"RestElement\";\n      const arg = node.argument;\n      this.checkToRestConversion(arg, true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, 1);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, flags) {\n    const allowEmpty = flags & 1;\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        let rest = this.parseRestBinding();\n        if (this.hasPlugin(\"flow\") || flags & 2) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & 2) {\n          if (this.match(26) && this.hasPlugin(\"decorators\")) {\n            this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n          }\n          while (this.match(26)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n  parseBindingProperty() {\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n    const prop = this.startNode();\n    if (type === 139) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseBindingElement(flags, decorators) {\n    const left = this.parseMaybeDefault();\n    if (this.hasPlugin(\"flow\") || flags & 2) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseFunctionParamType(param) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    startLoc != null ? startLoc : startLoc = this.state.startLoc;\n    left = left != null ? left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n  isOptionalMemberExpression(expression) {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n  checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor\n          });\n        }\n      }\n      if (binding !== 64) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, expression, {\n        ancestor\n      });\n      return;\n    }\n    let key, isParenthesizedExpression;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n    const nextAncestor = type === \"ArrayPattern\" || type === \"ObjectPattern\" ? {\n      type\n    } : ancestor;\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);\n        }\n      }\n    } else if (val) {\n      this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);\n    }\n  }\n  checkIdentifier(at, bindingType, strictModeChanged = false) {\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === 64) {\n        this.raise(Errors.StrictEvalArguments, at, {\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name\n        });\n      }\n    }\n    if (bindingType & 8192 && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n    if (!(bindingType & 64)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);\n    return true;\n  }\n}\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({\n    methodName\n  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName\n  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({\n    kind\n  }) => `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier\n  }) => `Accessibility modifier already seen.`,\n  DuplicateModifier: ({\n    modifier\n  }) => `Duplicate modifier: '${modifier}'.`,\n  EmptyHeritageClauseType: ({\n    token\n  }) => `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers\n  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier\n  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({\n    token\n  }) => `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier\n  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers\n  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier\n  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName\n  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType: \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({\n    type\n  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"const\", \"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();\n  }\n  tsNextTokenOnSameLineAndCanFollowModifier() {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      return false;\n    }\n    return this.tsTokenCanFollowModifier();\n  }\n  tsNextTokenCanFollowModifier() {\n    if (this.match(106)) {\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n    return this.tsNextTokenOnSameLineAndCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.includes(modifier)) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers({\n    allowedModifiers,\n    disallowedModifiers,\n    stopOnStartOfClassStaticBlock,\n    errorTemplate = TSErrors.InvalidModifierOnTypeMember\n  }, modified) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, loc, {\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, loc, {\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, startLoc, {\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n      case \"HeritageClauseElement\":\n        return this.match(5);\n      case \"TupleElementTypes\":\n        return this.match(3);\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStartLoc.index;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(134)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      {\n        node.argument = super.parseExprAtom();\n      }\n    } else {\n      {\n        node.argument = this.parseStringLiteral(this.state.value);\n      }\n    }\n    if (this.eat(12) && !this.match(11)) {\n      node.options = super.parseMaybeAssignAllowIn();\n      this.eat(12);\n    } else {\n      node.options = null;\n    }\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(1 | 2);\n    }\n    if (this.match(47)) {\n      {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n    }\n    return this.finishNode(node, \"TSImportType\");\n  }\n  tsParseEntityName(flags) {\n    let entity;\n    if (flags & 1 && this.match(78)) {\n      if (flags & 2) {\n        entity = this.parseIdentifier(true);\n      } else {\n        const node = this.startNode();\n        this.next();\n        entity = this.finishNode(node, \"ThisExpression\");\n      }\n    } else {\n      entity = this.parseIdentifier(!!(flags & 1));\n    }\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(!!(flags & 1));\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(1);\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n    }\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      {\n        node.exprName = this.tsParseEntityName(1 | 2);\n      }\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n    }\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n  tsParseTypeParameter(parseModifiers) {\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(143)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, node);\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    const list = super.parseBindingList(11, 41, 2);\n    for (const pattern of list) {\n      const {\n        type\n      } = pattern;\n      if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n          type\n        });\n      }\n    }\n    return list;\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, node);\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition());\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, this.state.curPosition());\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, this.state.curPosition());\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    }, node);\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(122);\n    }\n    if (this.isContextual(122)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(122);\n    } else if (this.eatContextual(122)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    {\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsExpectThenParseType(58);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    }\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n      }\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n  tsParseTupleElementType() {\n    const restStartLoc = this.state.startLoc;\n    const rest = this.eat(21);\n    const {\n      startLoc\n    } = this.state;\n    let labeled;\n    let label;\n    let optional;\n    let type;\n    const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n    const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n    if (chAfterWord === 58) {\n      labeled = true;\n      optional = false;\n      label = this.parseIdentifier(true);\n      this.expect(14);\n      type = this.tsParseType();\n    } else if (chAfterWord === 63) {\n      optional = true;\n      const wordName = this.state.value;\n      const typeOrLabel = this.tsParseNonArrayType();\n      if (this.lookaheadCharCode() === 58) {\n        labeled = true;\n        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);\n        this.expect(17);\n        this.expect(14);\n        type = this.tsParseType();\n      } else {\n        labeled = false;\n        type = typeOrLabel;\n        this.expect(17);\n      }\n    } else {\n      type = this.tsParseType();\n      optional = this.eat(17);\n      labeled = this.eat(14);\n    }\n    if (labeled) {\n      let labeledNode;\n      if (label) {\n        labeledNode = this.startNodeAt(startLoc);\n        labeledNode.optional = optional;\n        labeledNode.label = label;\n        labeledNode.elementType = type;\n        if (this.eat(17)) {\n          labeledNode.optional = true;\n          this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);\n        }\n      } else {\n        labeledNode = this.startNodeAt(startLoc);\n        labeledNode.optional = optional;\n        this.raise(TSErrors.InvalidTupleMemberLabel, type);\n        labeledNode.label = type;\n        labeledNode.elementType = this.tsParseType();\n      }\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAt(startLoc);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(restStartLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    switch (this.state.type) {\n      case 135:\n      case 136:\n      case 134:\n      case 85:\n      case 86:\n        node.literal = super.parseExprAtom();\n        break;\n      default:\n        this.unexpected();\n    }\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  tsParseTemplateLiteralType() {\n    {\n      const node = this.startNode();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 134:\n      case 135:\n      case 136:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 135 && nextToken.type !== 136) {\n            this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    const {\n      startLoc\n    } = this.state;\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAt(startLoc);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAt(startLoc);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, node);\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(115);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, 1);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n  }\n  tsTryParseTypeAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeAnnotation();\n    }\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 109) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {\n        reservedWord: \"asserts\"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(124) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      {\n        const node = this.startNode();\n        node.expression = this.tsParseEntityName(1 | 2);\n        if (this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n        return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n      }\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node, properties = {}) {\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(129);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, 130);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, 2);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);\n      this.expect(29);\n      if (this.isContextual(114) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n  tsInTopLevelContext(cb) {\n    if (this.curContext() !== types.brace) {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    } else {\n      return cb();\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    if (this.match(token)) {\n      return this.tsNextThenParseType();\n    }\n  }\n  tsExpectThenParseType(token) {\n    return this.tsInType(() => {\n      this.expect(token);\n      return this.tsParseType();\n    });\n  }\n  tsNextThenParseType() {\n    return this.tsInType(() => {\n      this.next();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n  tsParseEnumDeclaration(node, properties = {}) {\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(126);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? 8971 : 8459);\n    {\n      this.expect(5);\n      node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n      this.expect(8);\n    }\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n  tsParseEnumBody() {\n    const node = this.startNode();\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumBody\");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(0);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, 1024);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(112)) {\n      node.kind = \"global\";\n      {\n        node.global = true;\n      }\n      node.id = this.parseIdentifier();\n    } else if (this.match(134)) {\n      node.kind = \"module\";\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n    {\n      node.isExport = isExport || false;\n    }\n    node.id = maybeDefaultIdentifier || this.parseIdentifier();\n    this.checkIdentifier(node.id, 4096);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(119) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(0);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(119);\n    this.expect(10);\n    if (!this.match(134)) {\n      this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    }\n    this.state = state;\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let startType = this.state.type;\n    let kind;\n    if (this.isContextual(100)) {\n      startType = 74;\n      kind = \"let\";\n    }\n    return this.tsInAmbientContext(() => {\n      switch (startType) {\n        case 68:\n          nany.declare = true;\n          return super.parseFunctionStatement(nany, false, false);\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n        case 126:\n          return this.tsParseEnumDeclaration(nany, {\n            declare: true\n          });\n        case 112:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        case 75:\n        case 74:\n          if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n          this.expect(75);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true\n          });\n        case 129:\n          {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n            if (result) return result;\n          }\n        default:\n          if (tokenIsIdentifier(startType)) {\n            return this.tsParseDeclaration(nany, this.state.value, true, null);\n          }\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(256);\n          this.prodParam.enter(0);\n          const mod = node;\n          mod.kind = \"global\";\n          {\n            node.global = true;\n          }\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(134)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            node.kind = \"module\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          node.kind = \"namespace\";\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) return;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) return;\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInTopLevelContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, node);\n    } else if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseBindingElement(flags, decorators) {\n    const startLoc = this.state.startLoc;\n    const modified = {};\n    this.tsParseModifiers({\n      allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n    }, modified);\n    const accessibility = modified.accessibility;\n    const override = modified.override;\n    const readonly = modified.readonly;\n    if (!(flags & 4) && (accessibility || readonly || override)) {\n      this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n    }\n    const left = this.parseMaybeDefault();\n    if (flags & 2) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  tsDisallowOptionalPattern(node) {\n    for (const param of node.params) {\n      if (param.type !== \"Identifier\" && param.optional && !this.state.isAmbientContext) {\n        this.raise(TSErrors.PatternIsOptional, param);\n      }\n    }\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    this.tsDisallowOptionalPattern(node);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    this.tsDisallowOptionalPattern(node);\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, 1024);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          {\n            result.typeParameters = typeArguments;\n          }\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          {\n            node.typeParameters = typeArguments;\n          }\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        {\n          node.typeParameters = typeArguments;\n        }\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      {\n        node.typeParameters = callee.typeParameters;\n      }\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n              keyword: \"const\"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  checkDuplicateExports() {}\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      const ch = this.lookaheadCharCode();\n      return isExport ? ch === 123 || ch === 42 : ch !== 61;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      node.exportKind = phase === \"type\" ? \"type\" : \"value\";\n    } else {\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImport(node) {\n    if (this.match(134)) {\n      node.importKind = \"value\";\n      return super.parseImport(node);\n    }\n    let importNode;\n    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n      node.importKind = \"value\";\n      return this.tsParseImportEqualsDeclaration(node);\n    } else if (this.isContextual(130)) {\n      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      if (this.lookaheadCharCode() === 61) {\n        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n      } else {\n        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);\n      }\n    } else {\n      importNode = super.parseImport(node);\n    }\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      const nodeImportEquals = node;\n      this.next();\n      let maybeDefaultIdentifier = null;\n      if (this.isContextual(130) && this.isPotentialImportPhase(false)) {\n        maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);\n      } else {\n        nodeImportEquals.importKind = \"value\";\n      }\n      const declaration = this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);\n      {\n        return declaration;\n      }\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      this.sawUnambiguousESM = true;\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(128);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(124) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n        this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(126)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(106) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    }, member);\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, member);\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, member);\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, member);\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, member);\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    return super.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseParenItem(node, startLoc) {\n    const newNode = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      newNode.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(125)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(125);\n    if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n    if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(113)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, node);\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, node);\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, method, {\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !hasOwnProperty.call(node.value, \"body\")) {\n      return;\n    }\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n    }\n    if (this.eatContextual(113)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin(\"jsx\") && (this.match(143) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra2;\n    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra2 = node.extra) != null && _node$extra2.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, node);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    }\n    return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseFunctionParamType(param) {\n    if (this.eat(17)) {\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n      case \"TSParameterProperty\":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    switch (type) {\n      case \"TSTypeCastExpression\":\n        return true;\n      case \"TSParameterProperty\":\n        return \"parameter\";\n      case \"TSNonNullExpression\":\n        return \"expression\";\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n        return (binding !== 64 || !isUnparenthesizedInAssign) && [\"expression\", true];\n      default:\n        return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n  }\n  parseBindingAtom() {\n    if (this.state.type === 78) {\n      return this.parseIdentifier(true);\n    }\n    return super.parseBindingAtom();\n  }\n  parseMaybeDecoratorArguments(expr, startLoc) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr, startLoc);\n        {\n          call.typeParameters = typeArguments;\n        }\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr, startLoc);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    }\n    return super.checkCommaAfterRest(close);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        this.finishOp(48, 1);\n        return;\n      }\n      if (code === 60) {\n        this.finishOp(47, 1);\n        return;\n      }\n    }\n    super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableListItem(exprList, index, isLHS) {\n    const node = exprList[index];\n    if (node.type === \"TSTypeCastExpression\") {\n      exprList[index] = this.typeCastToParameter(node);\n    }\n    super.toAssignableListItem(exprList, index, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) {\n        {\n          node.typeParameters = typeArguments;\n        }\n      }\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const {\n      isAmbientContext: oldIsAmbientContext,\n      strict: oldStrict\n    } = this.state;\n    this.state.isAmbientContext = true;\n    this.state.strict = false;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n      this.state.strict = oldStrict;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(129)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasEstreePlugin = this.hasPlugin(\"estree\");\n      const methodFn = hasEstreePlugin ? method.value : method;\n      if (methodFn.body) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const {\n        value\n      } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  }\n  return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(133)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(133);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    let placeholder = node;\n    if (!placeholder.expectedNode || !placeholder.type) {\n      placeholder = this.finishNode(placeholder, \"Placeholder\");\n    }\n    placeholder.expectedNode = expectedNode;\n    return placeholder;\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      this.finishOp(133, 2);\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 133) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    var _expr$extra;\n    if (expr.type !== \"Placeholder\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n    this.semicolon();\n    const stmtPlaceholder = node;\n    stmtPlaceholder.name = expr.name;\n    return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (placeholder) {\n      if (this.match(81) || this.match(133) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node, decorators);\n    const node2 = node;\n    if (!this.isContextual(98) && !this.match(12)) {\n      node2.specifiers = [];\n      node2.source = null;\n      node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node2, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    var _specifiers;\n    if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(98) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(98);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index)) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nfunction validatePlugins(pluginsMap) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    const decoratorsBeforeExport = pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");\n    }\n    const allowCallParenthesized = pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    var _pluginsMap$get;\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = ((_pluginsMap$get = pluginsMap.get(\"recordAndTuple\")) == null ? void 0 : _pluginsMap$get.syntaxType) === \"hash\";\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(`Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`);\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(`Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`);\n    }\n  }\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    {\n      if (pluginsMap.has(\"deprecatedImportAssert\") || pluginsMap.has(\"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\");\n      }\n      const moduleAttributesVersionPluginOption = pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\"Cannot combine importAssertions and deprecatedImportAssert plugins.\");\n    }\n  }\n  if (!pluginsMap.has(\"deprecatedImportAssert\") && pluginsMap.has(\"importAttributes\") && pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax) {\n    {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n        }\n      }\n    }\n  }\n  if (pluginsMap.has(\"asyncDoExpressions\") && !pluginsMap.has(\"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n  if (pluginsMap.has(\"optionalChainingAssign\") && pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\") {\n    throw new Error(\"The 'optionalChainingAssign' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is '2023-07'.\");\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, sawProto, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return sawProto;\n    }\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n      return true;\n    }\n    return sawProto;\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && this.offsetToSourcePos(expr.start) === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(140)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & 256) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(108);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (isYield) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(108)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n          });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, \"UpdateExpression\"));\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, expr = this.finishNode(node, \"UpdateExpression\"));\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(139)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type !== \"Super\", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n  parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (this.match(10)) {\n          if (this.optionFlags & 512) {\n            return this.parseImportCall(node);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 135:\n        return this.parseNumericLiteral(this.state.value);\n      case 136:\n        return this.parseBigIntLiteral(this.state.value);\n      case 134:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, callee);\n          }\n        }\n      case 139:\n        {\n          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          }\n          this.unexpected();\n          break;\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          } else {\n            this.unexpected();\n          }\n          break;\n        }\n      default:\n        if (type === 137) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      if (pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case \"smart\":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(2);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !(this.optionFlags & 16)) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (!this.scope.allowSuper && !(this.optionFlags & 16)) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n    return this.finishNode(node, \"Super\");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      if (this.match(103)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n    if (this.isContextual(101)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(105) || this.isContextual(97)) {\n      const isSource = this.isContextual(105);\n      this.expectPlugin(isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\");\n      if (!(this.optionFlags & 512)) {\n        throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {\n          phase: this.state.value\n        });\n      }\n      this.next();\n      node.phase = isSource ? \"source\" : \"defer\";\n      return this.parseImportCall(node);\n    }\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.startNode();\n    this.addExtra(node, \"raw\", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!(this.optionFlags & 1024)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !(this.optionFlags & 4)) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\");\n  }\n  parseNewCallee(node) {\n    const isImport = this.match(83);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (isImport && (callee.type === \"Import\" || callee.type === \"ImportExpression\")) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    node.expressions = substitutions;\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(prop, isRecord, sawProto, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n      {\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const {\n        key\n      } = prop;\n      const keyName = key.name;\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, method);\n    }\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 135:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 134:\n            key = this.parseStringLiteral(value);\n            break;\n          case 136:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 139:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            if (type === 137) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n            this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 139) {\n        prop.computed = false;\n      }\n    }\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(2 | 4);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= 8;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | 4);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node);\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, 65, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\"\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(132);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n  recordAwaitIfAllowed() {\n    const isAwaitAllowed = this.prodParam.hasAwait || this.optionFlags & 1 && !this.scope.inFunction;\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n    return isAwaitAllowed;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n    if (!this.scope.inFunction && !(this.optionFlags & 1)) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n  isAmbiguousPrefixOrIdentifier() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 138 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n  parseYield(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 140:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n  parseImportCall(node) {\n    this.next();\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(12)) {\n      if (!this.match(11)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        if (this.eat(12) && !this.match(11)) {\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(12) && !this.match(11));\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(11);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = 8 & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | 8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = 8 & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: 1\n  },\n  switchLabel = {\n    kind: 2\n  };\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input, startIndex) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === \"number\") {\n      {\n        if (type === 139) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(132),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n    if (this.optionFlags & 256) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input, this.startIndex);\n    }\n    return this.finishNode(file, \"File\");\n  }\n  parseProgram(program, end = 140, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (!(this.optionFlags & 64) && this.scope.undefinedExports.size > 0) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, {\n            localName\n          });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram;\n    if (end === 140) {\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end));\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n  isLet() {\n    if (!this.isContextual(100)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasInLineFollowingBindingIdentifierOrBrace() {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const {\n      type,\n      containsEsc\n    } = this.lookahead();\n    if (type === 102 && !containsEsc) {\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n  startsAwaitUsing() {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(1 | 2 | 4 | 8);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n  }\n  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {\n    let flags = 0;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= 4;\n      if (allowLabeledFunction) {\n        flags |= 8;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n  parseStatement() {\n    return this.parseStatementLike(0);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & 2);\n    const allowFunctionDeclaration = !!(flags & 4);\n    const topLevel = flags & 1;\n    switch (startType) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 96:\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next();\n          return this.parseVarStatement(node, \"await using\");\n        }\n        break;\n      case 107:\n        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(node, \"using\");\n      case 100:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!(this.optionFlags & 8) && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n          }\n          this.next();\n          let result;\n          if (startType === 83) {\n            result = this.parseImport(node);\n          } else {\n            result = this.parseExport(node, decorators);\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(startType) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!(this.optionFlags & 8) && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false;\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      var _classNode$decorators;\n      if ((_classNode$decorators = classNode.decorators) != null && _classNode$decorators.length) {\n        if (typeof this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== \"boolean\") {\n          this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(139)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n  parseMaybeDecoratorArguments(expr, startLoc) {\n    if (this.eat(10)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === 1)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, {\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isContextual(96) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(0);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(100);\n    {\n      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();\n      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n      if (this.match(74) || this.match(75) || isLetOrUsing) {\n        const initNode = this.startNode();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next();\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n        const isForIn = this.match(58);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {\n          return this.parseForIn(node, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n      }\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(102);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        type\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !(this.optionFlags & 2)) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(0);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    this.scope.enter(this.options.annexB && param.type === \"Identifier\" ? 8 : 0);\n    this.checkLVal(param, {\n      type: \"CatchClause\"\n    }, 9);\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(0);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n    return this.finishNode(node, \"TryStatement\");\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, \"WithStatement\");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start)\n    });\n    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(0);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n  parseVar(node, isFor, kind, allowMissingInitializer = false) {\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(102)))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind: \"destructuring\"\n          });\n        } else if ((kind === \"const\" || kind === \"using\" || kind === \"await using\") && !(this.match(58) || this.isContextual(102))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(id, {\n      type: \"VariableDeclarator\"\n    }, kind === \"var\" ? 5 : 8201);\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, 8);\n  }\n  parseFunction(node, flags = 0) {\n    const hangingDeclaration = flags & 2;\n    const isDeclaration = !!(flags & 1);\n    const requireId = isDeclaration && !(flags & 4);\n    const isAsync = !!(flags & 8);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(2);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, isConstructor) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  nameIsConstructor(key) {\n    return key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"StringLiteral\" && key.value === \"constructor\";\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && this.nameIsConstructor(method.key);\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(106);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(139);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? key.name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = \"method\";\n      const isPrivate = this.match(139);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if ((maybeContextualKw === \"get\" || maybeContextualKw === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      const isPrivate = this.match(139);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(139);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 132 || type === 134) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n    if (type === 139) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    this.parsePropertyName(member);\n    return member.key;\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(64 | 128 | 16);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(0);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? 6 : 2 : node.kind === \"set\" ? node.static ? 5 : 1 : 0;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n  parseInitializer(node) {\n    this.scope.enter(64 | 16);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(0);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId, bindingType = 8331) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, 5);\n    }\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, 98);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n    this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode(id);\n      specifier.exported = id;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      var _ref, _ref$specifiers;\n      (_ref$specifiers = (_ref = node).specifiers) != null ? _ref$specifiers : _ref.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      const node2 = node;\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, 1 | 4);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, 1 | 4 | 8);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 100) {\n        return false;\n      }\n      if ((type === 130 || type === 129) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(98)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n        return true;\n      }\n    }\n    if (this.isContextual(107)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n    if (this.isContextual(96) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      var _node$specifiers;\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n      } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        const decl = node.declaration;\n        if (decl.type === \"FunctionDeclaration\" || decl.type === \"ClassDeclaration\") {\n          const {\n            id\n          } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, {\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(130);\n      const isString = this.match(134);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n  parseModuleExportName() {\n    if (this.match(134)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(({\n        key,\n        value\n      }) => {\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    const {\n      specifiers\n    } = node;\n    const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);\n      }\n    } else if (node.module) {\n      var _node$assertions;\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);\n        }\n      }\n    }\n  }\n  isPotentialImportPhase(isExport) {\n    if (isExport) return false;\n    return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    if (isExport) {\n      return;\n    }\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      node.phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      node.phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      node.phase = null;\n    }\n  }\n  parseMaybeImportPhase(node, isExport) {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(node, isExport, null);\n      return null;\n    }\n    const phaseIdentifier = this.parseIdentifier(true);\n    const {\n      type\n    } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n      return null;\n    } else {\n      this.applyImportPhase(node, isExport, null);\n      return phaseIdentifier;\n    }\n  }\n  isPrecedingIdImportPhase(phase) {\n    const {\n      type\n    } = this.state;\n    return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n  }\n  parseImport(node) {\n    if (this.match(134)) {\n      return this.parseImportSourceAndAttributes(node);\n    }\n    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n  }\n  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n    node.specifiers = [];\n    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n    const parseNext = !hasDefault || this.eat(12);\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(98);\n    return this.parseImportSourceAndAttributes(node);\n  }\n  parseImportSourceAndAttributes(node) {\n    var _node$specifiers2;\n    (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    if (!this.match(134)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type, bindingType = 8201) {\n    this.checkLVal(specifier.local, {\n      type\n    }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n  parseImportAttributes() {\n    this.expect(5);\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(134)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(134)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    this.expect(8);\n    return attrs;\n  }\n  parseModuleAttributes() {\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(134)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAttributes(node) {\n    let attributes;\n    {\n      var useWith = false;\n    }\n    if (this.match(76)) {\n      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n        return;\n      }\n      this.next();\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      {\n        useWith = true;\n      }\n    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      if (!this.hasPlugin(\"deprecatedImportAssert\") && !this.hasPlugin(\"importAssertions\")) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (!this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next();\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"));\n      return true;\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(134);\n      const isMaybeTypeOnly = this.isContextual(130);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input, pluginsMap) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= 1;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= 2;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= 8;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= 16;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= 64;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= 4;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= 32;\n    }\n    if (options.ranges) {\n      optionFlags |= 128;\n    }\n    if (options.tokens) {\n      optionFlags |= 256;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= 512;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= 1024;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= 2048;\n    }\n    if (options.attachComment) {\n      optionFlags |= 4096;\n    }\n    if (options.annexB) {\n      optionFlags |= 8192;\n    }\n    this.optionFlags = optionFlags;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file;\n  }\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  const pluginsMap = new Map();\n  if (options != null && options.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n  return new cls(options, input, pluginsMap);\n}\nconst parserClassCache = new Map();\nfunction getParserClass(pluginsMap) {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","node","type","prefix","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationExport","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","YieldNotInGeneratorFunction","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","Object","assign","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","defineProperty","enumerable","configurable","toParseErrorConstructor","toMessage","reasonCode","syntaxPlugin","hasMissingPlugin","oldReasonCodes","AccessorCannotDeclareThisParameter","AccessorCannotHaveTypeParameters","ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference","SetAccessorCannotHaveOptionalParameter","SetAccessorCannotHaveRestParameter","SetAccessorCannotHaveReturnType","loc","details","error","SyntaxError","pos","clone","overrides","_overrides$loc","get","set","writable","ParseErrorEnum","argument","Array","isArray","parseErrorTemplates","ParseErrorConstructors","keys","template","_ref","rest","_objectWithoutPropertiesLoose","_excluded","Errors","createDefaultOptions","sourceType","sourceFilename","undefined","startIndex","startColumn","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","allowYieldOutsideFunction","plugins","strictMode","ranges","tokens","createImportExpressions","createParenthesizedExpressions","errorRecovery","attachComment","annexB","getOptions","opts","options","Error","toUnenumerable","object","toESTreeLocation","estree","superClass","ESTreeParserMixin","parse","file","optionFlags","parseRegExpLiteral","pattern","flags","regex","RegExp","_","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","parseMethod","isGenerator","isConstructor","allowDirectSuper","inClassScope","funcNode","startNode","typeParameters","resetStartLocationFromNode","computed","finishNode","nameIsConstructor","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseClassAccessorProperty","accessorPropertyNode","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","_ref2","source","arguments","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","push","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","placeholder","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","sourceToOffsetPos","sourcePos","offsetToSourcePos","offsetPos","hasPlugin","pluginConfig","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","properties","members","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","hasNewLine","skipWhiteSpace","skipWhiteSpaceInLine","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","firstInvalidTemplateEscapePos","strictErrors","tokensLength","v","init","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","canStartJSXElement","containsEsc","hasTopLevelAwait","curPosition","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","exec","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","e","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","isDecimal","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","matches","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowInTopLevelContext","cb","oldContext","flowParseTypeParameterInstantiationInExpression","reScan_lt","oldNoAnonFunctionType","reScan_lt_gt","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","classBody","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassMethod","allowsDirectSuper","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseFunctionParamType","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","jsxParseOpeningElementAfterName","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","toAssignableListItem","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseBindingElement","parseBindingRestProperty","parseBindingProperty","parsePropertyName","checkLVal","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidHeritageClauseType","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenOnSameLineAndCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedType","tsExpectThenParseType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restStartLoc","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInTopLevelContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseEnumBody","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","nodeImportEquals","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldStrict","oldInAbstractClass","maybeTakeDecorators","hasEstreePlugin","methodFn","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","stmtPlaceholder","parseBlock","createNewLexicalScope","parseFunctionId","requireId","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","PIPELINE_PROPOSALS","TOPIC_TOKENS","validatePlugins","pluginsMap","decoratorsBeforeExport","allowCallParenthesized","_pluginsMap$get","proposalList","p","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","version","deprecatedAssertSyntax","RECORD_AND_TUPLE_SYNTAX_TYPES","missingPlugins","mixinPlugins","mixinPluginNames","ExpressionParser","checkProto","isRecord","sawProto","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","isYield","parseYield","ownExpressionErrors","parseMaybeConditional","isAmbiguousPrefixOrIdentifier","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","recordAwaitIfAllowed","parseAwait","update","isDelete","parseUpdate","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","substitutions","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","isAwaitAllowed","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifierOrBrace","startsUsingForOf","startsAwaitUsing","parseModuleItem","parseStatementListItem","allowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","maybeContextualKw","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_ref$specifiers","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","find","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginList"],"sources":["/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/location.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error/module-errors.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error/to-node-description.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error/standard-errors.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parse-error.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/options.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/estree.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/tokenizer/context.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/tokenizer/types.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/identifier.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/scope.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/flow/scope.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/base.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/comments.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/whitespace.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/tokenizer/state.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/babel-helper-string-parser/src/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/tokenizer/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/class-scope.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/expression-scope.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/util/production-parameter.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/util.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/node.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/flow/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/jsx/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/typescript/scope.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/lval.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/typescript/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/placeholders.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugins/v8intrinsic.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/plugin-utils.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/expression.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/statement.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/parser/index.ts","/Users/maliktarashev/gametracker-react-redux/ui/node_modules/@babel/parser/src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        if (!funcNode.body) {\n          (funcNode as unknown as N.EstreeTSEmptyBodyFunctionExpression).type =\n            \"TSEmptyBodyFunctionExpression\";\n        }\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      (accessorPropertyNode as unknown as N.EstreeAccessorProperty).type =\n        \"AccessorProperty\";\n      return accessorPropertyNode;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement | null)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      (node as unknown as RestElement).type = \"RestElement\";\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n        node.options = super.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      tupleSyntaxIsHash\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n"],"mappings":"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C,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEjkD,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}